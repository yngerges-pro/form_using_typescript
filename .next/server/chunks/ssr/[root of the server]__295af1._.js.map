{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nasha/proj/src/app/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState } from \"react\";\nimport {useForm, SubmitHandler} from \"react-hook-form\";\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useTable } from \"@refinedev/react-table\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport {useReactTable} from \"@tanstack/react-table\";\nimport { useNavigation } from \"@refinedev/core\";\nimport { ColumnDef, flexRender } from \"@tanstack/react-table\";\n\n// Define Zod validation schema\nconst schema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Email is required\").min(1, \"Invalid email address\"),\n  message: z.string().min(1, \"Message is required\"),\n  department: z.string().min(1,\"Department is required\"),\n  model: z.string().min(1,\"Required\"),\n  serialnumber: z.string().min(1,\"Required\"),\n  date: z.string().min(1,\"Required\"),\n  status: z.string().min(1,\"Required\"),\n\n});\n\ntype FormData = z.infer<typeof schema>;\n\nconst MyForm = () => {\n  const [userList, setUserList] = useState<FormData[]>([]);\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<FormData>({\n    resolver: zodResolver(schema) // Integrate Zod schema with React Hook Form\n  });\n\n  // Handle form submission\n  const onSubmit: SubmitHandler<FormData> = (data) => {\n      setUserList((prevList) => [...prevList,data]);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {accessorKey: \"name\", header: \"Name\"},\n      {accessorKey: \"email\", header: \"Email\"},\n      {accessorKey: \"message\", header: \"Message\"},\n      {accessorKey: \"department\", header: \"Department\"},\n      {accessorKey: \"model\", header: \"Model\"},\n      {accessorKey: \"serialnumber\", header: \"Serialnumber\"},\n      {accessorKey: \"date\", header: \"Date\"},\n      {accessorKey: \"status\", header: \"Status\"},\n\n    ],\n    []\n  );\n\n  const table = useTable({\n    data: userList,\n    columns,\n  })\n\n  return (\n    <div>\n    {/* Form */}\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <div>\n        <label>Name:</label>\n        <input {...register(\"name\")} placeholder=\"Name\" />\n        {errors.name && <p>{errors.name.message}</p>}\n      </div>\n\n      <div>\n        <label>Email:</label>\n        <input {...register(\"email\")} placeholder=\"Email\" />\n        {errors.email && <p>{errors.email.message}</p>}\n      </div>\n\n      <div>\n        <label>Message:</label>\n        <textarea {...register(\"message\")} placeholder=\"Message\" />\n        {errors.message && <p>{errors.message.message}</p>}\n      </div>\n\n      <div>\n        <label>Department:</label>\n        <select {...register(\"department\")}>\n          <option value=\"\">Select One</option>\n          <option value=\"Machining\">Machining</option>\n          <option value=\"Assembly\">Assembly</option>\n          <option value=\"Packaging\">Packaging</option>\n          <option value=\"Shipping\">Shipping</option>\n        </select>\n        {errors.department && <p>{errors.department.message}</p>}\n      </div>\n\n      <div>\n        <label>Model:</label>\n        <input {...register(\"model\")} placeholder=\"Model\" />\n        {errors.model && <p>{errors.model.message}</p>}\n      </div>\n\n      <div>\n        <label>Serial Number:</label>\n        <input {...register(\"serialnumber\")} placeholder=\"Serial Number\" />\n        {errors.serialnumber && <p>{errors.serialnumber.message}</p>}\n      </div>\n\n      <div>\n        <label>Install Date:</label>\n        <input type=\"date\" {...register(\"date\")} />\n        {errors.date && <p>{errors.date.message}</p>}\n      </div>\n\n      <div>\n        <label>Status:</label>\n        <select {...register(\"status\")}>\n          <option value=\"\">Select One</option>\n          <option value=\"Operational\">Operational</option>\n          <option value=\"Down\">Down</option>\n          <option value=\"Maintenance\">Maintenance</option>\n          <option value=\"Retired\">Retired</option>\n        </select>\n        {errors.status && <p>{errors.status.message}</p>}\n      </div>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n\n    {/* Table */}\n    <div>\n      <h2>User Data</h2>\n      {userList.length > 0 ? (\n        <table>\n          <thead>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <tr key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <th key={header.id}>{flexRender(header.column.columnDef.header, header.getContext())}</th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody>\n            {table.getRowModel().rows.map((row) => (\n              <tr key={row.id}>\n                {row.getVisibleCells().map((cell) => (\n                  <td key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No user data available.</p>\n      )}\n    </div>\n  </div>\n   \n  \n  );\n};\nconst App = () => {\n  const queryClient = new QueryClient();\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <MyForm />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n\n\n\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}